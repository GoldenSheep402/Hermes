// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: torrent/v1/torrent.proto

package torrentV1

import (
	_ "github.com/GoldenSheep402/Hermes/pkg/proto/category/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Torrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Torrent) Reset() {
	*x = Torrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Torrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Torrent) ProtoMessage() {}

func (x *Torrent) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Torrent.ProtoReflect.Descriptor instead.
func (*Torrent) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{0}
}

func (x *Torrent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TorrentMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId  string `protobuf:"bytes,2,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	TorrentId   string `protobuf:"bytes,3,opt,name=torrentId,proto3" json:"torrentId,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Order       int32  `protobuf:"varint,5,opt,name=order,proto3" json:"order,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Value       string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TorrentMetaData) Reset() {
	*x = TorrentMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TorrentMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentMetaData) ProtoMessage() {}

func (x *TorrentMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentMetaData.ProtoReflect.Descriptor instead.
func (*TorrentMetaData) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{1}
}

func (x *TorrentMetaData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TorrentMetaData) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *TorrentMetaData) GetTorrentId() string {
	if x != nil {
		return x.TorrentId
	}
	return ""
}

func (x *TorrentMetaData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TorrentMetaData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TorrentMetaData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TorrentMetaData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TorrentMetaData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// GetTorrentV1
type GetTorrentV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTorrentV1Request) Reset() {
	*x = GetTorrentV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTorrentV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentV1Request) ProtoMessage() {}

func (x *GetTorrentV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentV1Request.ProtoReflect.Descriptor instead.
func (*GetTorrentV1Request) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{2}
}

func (x *GetTorrentV1Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTorrentV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*TorrentMetaData `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetTorrentV1Response) Reset() {
	*x = GetTorrentV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTorrentV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentV1Response) ProtoMessage() {}

func (x *GetTorrentV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentV1Response.ProtoReflect.Descriptor instead.
func (*GetTorrentV1Response) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{3}
}

func (x *GetTorrentV1Response) GetMetadata() []*TorrentMetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetTorrentV1List
type GetTorrentV1ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string `protobuf:"bytes,1,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Limit      int64  `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTorrentV1ListRequest) Reset() {
	*x = GetTorrentV1ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTorrentV1ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentV1ListRequest) ProtoMessage() {}

func (x *GetTorrentV1ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentV1ListRequest.ProtoReflect.Descriptor instead.
func (*GetTorrentV1ListRequest) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{4}
}

func (x *GetTorrentV1ListRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *GetTorrentV1ListRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTorrentV1ListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTorrentV1ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Torrents []*TorrentBasic `protobuf:"bytes,1,rep,name=torrents,proto3" json:"torrents,omitempty"`
}

func (x *GetTorrentV1ListResponse) Reset() {
	*x = GetTorrentV1ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTorrentV1ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTorrentV1ListResponse) ProtoMessage() {}

func (x *GetTorrentV1ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTorrentV1ListResponse.ProtoReflect.Descriptor instead.
func (*GetTorrentV1ListResponse) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{5}
}

func (x *GetTorrentV1ListResponse) GetTorrents() []*TorrentBasic {
	if x != nil {
		return x.Torrents
	}
	return nil
}

type TorrentBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CategoryId   string `protobuf:"bytes,4,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	CategoryName string `protobuf:"bytes,5,opt,name=categoryName,proto3" json:"categoryName,omitempty"`
}

func (x *TorrentBasic) Reset() {
	*x = TorrentBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TorrentBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TorrentBasic) ProtoMessage() {}

func (x *TorrentBasic) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TorrentBasic.ProtoReflect.Descriptor instead.
func (*TorrentBasic) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{6}
}

func (x *TorrentBasic) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TorrentBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TorrentBasic) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TorrentBasic) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *TorrentBasic) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

// CreateTorrentV1
type CreateTorrentV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId string             `protobuf:"bytes,1,opt,name=categoryId,proto3" json:"categoryId,omitempty"`
	Name       string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment    string             `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Metadata   []*TorrentMetaData `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
	Torrent    *Torrent           `protobuf:"bytes,5,opt,name=torrent,proto3" json:"torrent,omitempty"`
}

func (x *CreateTorrentV1Request) Reset() {
	*x = CreateTorrentV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTorrentV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTorrentV1Request) ProtoMessage() {}

func (x *CreateTorrentV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTorrentV1Request.ProtoReflect.Descriptor instead.
func (*CreateTorrentV1Request) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTorrentV1Request) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CreateTorrentV1Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTorrentV1Request) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateTorrentV1Request) GetMetadata() []*TorrentMetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateTorrentV1Request) GetTorrent() *Torrent {
	if x != nil {
		return x.Torrent
	}
	return nil
}

type CreateTorrentV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTorrentV1Response) Reset() {
	*x = CreateTorrentV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTorrentV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTorrentV1Response) ProtoMessage() {}

func (x *CreateTorrentV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTorrentV1Response.ProtoReflect.Descriptor instead.
func (*CreateTorrentV1Response) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTorrentV1Response) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DownloadTorrentV1
type DownloadTorrentV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DownloadTorrentV1Request) Reset() {
	*x = DownloadTorrentV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadTorrentV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTorrentV1Request) ProtoMessage() {}

func (x *DownloadTorrentV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTorrentV1Request.ProtoReflect.Descriptor instead.
func (*DownloadTorrentV1Request) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadTorrentV1Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DownloadTorrentV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DownloadTorrentV1Response) Reset() {
	*x = DownloadTorrentV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_torrent_v1_torrent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadTorrentV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadTorrentV1Response) ProtoMessage() {}

func (x *DownloadTorrentV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_torrent_v1_torrent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadTorrentV1Response.ProtoReflect.Descriptor instead.
func (*DownloadTorrentV1Response) Descriptor() ([]byte, []int) {
	return file_torrent_v1_torrent_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadTorrentV1Response) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_torrent_v1_torrent_proto protoreflect.FileDescriptor

var file_torrent_v1_torrent_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd3, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x50,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x08, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x98, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x07, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x9d, 0x04, 0x0a, 0x0e, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x1f, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x67, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x12,
	0x82, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x67, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x22, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x67,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x12, 0x24,
	0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x67, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x2f, 0x76, 0x31, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x70, 0x34, 0x30,
	0x32, 0x2f, 0x48, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x6f,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_torrent_v1_torrent_proto_rawDescOnce sync.Once
	file_torrent_v1_torrent_proto_rawDescData = file_torrent_v1_torrent_proto_rawDesc
)

func file_torrent_v1_torrent_proto_rawDescGZIP() []byte {
	file_torrent_v1_torrent_proto_rawDescOnce.Do(func() {
		file_torrent_v1_torrent_proto_rawDescData = protoimpl.X.CompressGZIP(file_torrent_v1_torrent_proto_rawDescData)
	})
	return file_torrent_v1_torrent_proto_rawDescData
}

var file_torrent_v1_torrent_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_torrent_v1_torrent_proto_goTypes = []any{
	(*Torrent)(nil),                   // 0: torrent.v1.Torrent
	(*TorrentMetaData)(nil),           // 1: torrent.v1.TorrentMetaData
	(*GetTorrentV1Request)(nil),       // 2: torrent.v1.GetTorrentV1Request
	(*GetTorrentV1Response)(nil),      // 3: torrent.v1.GetTorrentV1Response
	(*GetTorrentV1ListRequest)(nil),   // 4: torrent.v1.GetTorrentV1ListRequest
	(*GetTorrentV1ListResponse)(nil),  // 5: torrent.v1.GetTorrentV1ListResponse
	(*TorrentBasic)(nil),              // 6: torrent.v1.TorrentBasic
	(*CreateTorrentV1Request)(nil),    // 7: torrent.v1.CreateTorrentV1Request
	(*CreateTorrentV1Response)(nil),   // 8: torrent.v1.CreateTorrentV1Response
	(*DownloadTorrentV1Request)(nil),  // 9: torrent.v1.DownloadTorrentV1Request
	(*DownloadTorrentV1Response)(nil), // 10: torrent.v1.DownloadTorrentV1Response
}
var file_torrent_v1_torrent_proto_depIdxs = []int32{
	1,  // 0: torrent.v1.GetTorrentV1Response.metadata:type_name -> torrent.v1.TorrentMetaData
	6,  // 1: torrent.v1.GetTorrentV1ListResponse.torrents:type_name -> torrent.v1.TorrentBasic
	1,  // 2: torrent.v1.CreateTorrentV1Request.metadata:type_name -> torrent.v1.TorrentMetaData
	0,  // 3: torrent.v1.CreateTorrentV1Request.torrent:type_name -> torrent.v1.Torrent
	2,  // 4: torrent.v1.TorrentService.GetTorrentV1:input_type -> torrent.v1.GetTorrentV1Request
	4,  // 5: torrent.v1.TorrentService.GetTorrentV1List:input_type -> torrent.v1.GetTorrentV1ListRequest
	7,  // 6: torrent.v1.TorrentService.CreateTorrentV1:input_type -> torrent.v1.CreateTorrentV1Request
	9,  // 7: torrent.v1.TorrentService.DownloadTorrentV1:input_type -> torrent.v1.DownloadTorrentV1Request
	3,  // 8: torrent.v1.TorrentService.GetTorrentV1:output_type -> torrent.v1.GetTorrentV1Response
	5,  // 9: torrent.v1.TorrentService.GetTorrentV1List:output_type -> torrent.v1.GetTorrentV1ListResponse
	8,  // 10: torrent.v1.TorrentService.CreateTorrentV1:output_type -> torrent.v1.CreateTorrentV1Response
	10, // 11: torrent.v1.TorrentService.DownloadTorrentV1:output_type -> torrent.v1.DownloadTorrentV1Response
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_torrent_v1_torrent_proto_init() }
func file_torrent_v1_torrent_proto_init() {
	if File_torrent_v1_torrent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_torrent_v1_torrent_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Torrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TorrentMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetTorrentV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetTorrentV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetTorrentV1ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetTorrentV1ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TorrentBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTorrentV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTorrentV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadTorrentV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_torrent_v1_torrent_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadTorrentV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_torrent_v1_torrent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_torrent_v1_torrent_proto_goTypes,
		DependencyIndexes: file_torrent_v1_torrent_proto_depIdxs,
		MessageInfos:      file_torrent_v1_torrent_proto_msgTypes,
	}.Build()
	File_torrent_v1_torrent_proto = out.File
	file_torrent_v1_torrent_proto_rawDesc = nil
	file_torrent_v1_torrent_proto_goTypes = nil
	file_torrent_v1_torrent_proto_depIdxs = nil
}
