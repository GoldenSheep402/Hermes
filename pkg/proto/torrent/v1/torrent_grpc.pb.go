// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: torrent/v1/torrent.proto

package torrentV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TorrentService_GetTorrentV1_FullMethodName      = "/torrent.v1.TorrentService/GetTorrentV1"
	TorrentService_GetTorrentV1List_FullMethodName  = "/torrent.v1.TorrentService/GetTorrentV1List"
	TorrentService_CreateTorrentV1_FullMethodName   = "/torrent.v1.TorrentService/CreateTorrentV1"
	TorrentService_DownloadTorrentV1_FullMethodName = "/torrent.v1.TorrentService/DownloadTorrentV1"
)

// TorrentServiceClient is the client API for TorrentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentServiceClient interface {
	// GetTorrentV1
	// @Description
	// Get torrent by id, return torrent data
	// The file follows the torrent file format V1.
	// @Param GetTorrentV1Request
	// @Return GetTorrentV1Response
	// @Http GET /gapi/torrent/v1/info
	GetTorrentV1(ctx context.Context, in *GetTorrentV1Request, opts ...grpc.CallOption) (*GetTorrentV1Response, error)
	GetTorrentV1List(ctx context.Context, in *GetTorrentV1ListRequest, opts ...grpc.CallOption) (*GetTorrentV1ListResponse, error)
	// CreateTorrentV1
	// @Description
	// Create torrent, return torrent id
	// The file follows the torrent file format V1.
	// @Param CreateTorrentV1Request
	// @Return CreateTorrentV1Response
	// @Http POST /gapi/torrent/v1/info
	CreateTorrentV1(ctx context.Context, in *CreateTorrentV1Request, opts ...grpc.CallOption) (*CreateTorrentV1Response, error)
	DownloadTorrentV1(ctx context.Context, in *DownloadTorrentV1Request, opts ...grpc.CallOption) (*DownloadTorrentV1Response, error)
}

type torrentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentServiceClient(cc grpc.ClientConnInterface) TorrentServiceClient {
	return &torrentServiceClient{cc}
}

func (c *torrentServiceClient) GetTorrentV1(ctx context.Context, in *GetTorrentV1Request, opts ...grpc.CallOption) (*GetTorrentV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTorrentV1Response)
	err := c.cc.Invoke(ctx, TorrentService_GetTorrentV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) GetTorrentV1List(ctx context.Context, in *GetTorrentV1ListRequest, opts ...grpc.CallOption) (*GetTorrentV1ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTorrentV1ListResponse)
	err := c.cc.Invoke(ctx, TorrentService_GetTorrentV1List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) CreateTorrentV1(ctx context.Context, in *CreateTorrentV1Request, opts ...grpc.CallOption) (*CreateTorrentV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTorrentV1Response)
	err := c.cc.Invoke(ctx, TorrentService_CreateTorrentV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentServiceClient) DownloadTorrentV1(ctx context.Context, in *DownloadTorrentV1Request, opts ...grpc.CallOption) (*DownloadTorrentV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadTorrentV1Response)
	err := c.cc.Invoke(ctx, TorrentService_DownloadTorrentV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentServiceServer is the server API for TorrentService service.
// All implementations must embed UnimplementedTorrentServiceServer
// for forward compatibility.
type TorrentServiceServer interface {
	// GetTorrentV1
	// @Description
	// Get torrent by id, return torrent data
	// The file follows the torrent file format V1.
	// @Param GetTorrentV1Request
	// @Return GetTorrentV1Response
	// @Http GET /gapi/torrent/v1/info
	GetTorrentV1(context.Context, *GetTorrentV1Request) (*GetTorrentV1Response, error)
	GetTorrentV1List(context.Context, *GetTorrentV1ListRequest) (*GetTorrentV1ListResponse, error)
	// CreateTorrentV1
	// @Description
	// Create torrent, return torrent id
	// The file follows the torrent file format V1.
	// @Param CreateTorrentV1Request
	// @Return CreateTorrentV1Response
	// @Http POST /gapi/torrent/v1/info
	CreateTorrentV1(context.Context, *CreateTorrentV1Request) (*CreateTorrentV1Response, error)
	DownloadTorrentV1(context.Context, *DownloadTorrentV1Request) (*DownloadTorrentV1Response, error)
	mustEmbedUnimplementedTorrentServiceServer()
}

// UnimplementedTorrentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTorrentServiceServer struct{}

func (UnimplementedTorrentServiceServer) GetTorrentV1(context.Context, *GetTorrentV1Request) (*GetTorrentV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentV1 not implemented")
}
func (UnimplementedTorrentServiceServer) GetTorrentV1List(context.Context, *GetTorrentV1ListRequest) (*GetTorrentV1ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentV1List not implemented")
}
func (UnimplementedTorrentServiceServer) CreateTorrentV1(context.Context, *CreateTorrentV1Request) (*CreateTorrentV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTorrentV1 not implemented")
}
func (UnimplementedTorrentServiceServer) DownloadTorrentV1(context.Context, *DownloadTorrentV1Request) (*DownloadTorrentV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTorrentV1 not implemented")
}
func (UnimplementedTorrentServiceServer) mustEmbedUnimplementedTorrentServiceServer() {}
func (UnimplementedTorrentServiceServer) testEmbeddedByValue()                        {}

// UnsafeTorrentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentServiceServer will
// result in compilation errors.
type UnsafeTorrentServiceServer interface {
	mustEmbedUnimplementedTorrentServiceServer()
}

func RegisterTorrentServiceServer(s grpc.ServiceRegistrar, srv TorrentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTorrentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TorrentService_ServiceDesc, srv)
}

func _TorrentService_GetTorrentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).GetTorrentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_GetTorrentV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).GetTorrentV1(ctx, req.(*GetTorrentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_GetTorrentV1List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentV1ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).GetTorrentV1List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_GetTorrentV1List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).GetTorrentV1List(ctx, req.(*GetTorrentV1ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_CreateTorrentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTorrentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).CreateTorrentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_CreateTorrentV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).CreateTorrentV1(ctx, req.(*CreateTorrentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentService_DownloadTorrentV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTorrentV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentServiceServer).DownloadTorrentV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentService_DownloadTorrentV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentServiceServer).DownloadTorrentV1(ctx, req.(*DownloadTorrentV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentService_ServiceDesc is the grpc.ServiceDesc for TorrentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "torrent.v1.TorrentService",
	HandlerType: (*TorrentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTorrentV1",
			Handler:    _TorrentService_GetTorrentV1_Handler,
		},
		{
			MethodName: "GetTorrentV1List",
			Handler:    _TorrentService_GetTorrentV1List_Handler,
		},
		{
			MethodName: "CreateTorrentV1",
			Handler:    _TorrentService_CreateTorrentV1_Handler,
		},
		{
			MethodName: "DownloadTorrentV1",
			Handler:    _TorrentService_DownloadTorrentV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "torrent/v1/torrent.proto",
}
