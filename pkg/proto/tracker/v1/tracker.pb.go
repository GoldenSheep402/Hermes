// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: trackerV1/v1/trackerV1.proto

package trackerV1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTrackerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                            // Unique identifier for the request
	InfoHash      []byte `protobuf:"bytes,2,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`                  // Information hash for the torrent (Here is URL encoded)
	PeerId        []byte `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`                        // Unique identifier for the peer
	Port          int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`                                         // Port number of the peer
	Uploaded      int64  `protobuf:"varint,5,opt,name=uploaded,proto3" json:"uploaded,omitempty"`                                 // Amount of data uploaded by the peer
	Downloaded    int64  `protobuf:"varint,6,opt,name=downloaded,proto3" json:"downloaded,omitempty"`                             // Amount of data downloaded by the peer
	Left          int64  `protobuf:"varint,7,opt,name=left,proto3" json:"left,omitempty"`                                         // Amount of data left to download
	Event         string `protobuf:"bytes,8,opt,name=event,proto3" json:"event,omitempty"`                                        // Event type (e.g., started, stopped, completed)
	Ip            string `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`                                              // IP address of the peer
	NumWant       int32  `protobuf:"varint,10,opt,name=num_want,json=numWant,proto3" json:"num_want,omitempty"`                   // Number of peers the client wants to receive
	Compact       int32  `protobuf:"varint,11,opt,name=compact,proto3" json:"compact,omitempty"`                                  // Compact mode flag (0 for full, 1 for compact)
	NoPeerId      int32  `protobuf:"varint,12,opt,name=no_peer_id,json=noPeerId,proto3" json:"no_peer_id,omitempty"`              // Flag indicating whether to send peer IDs (0 or 1)
	Corrupt       int32  `protobuf:"varint,13,opt,name=corrupt,proto3" json:"corrupt,omitempty"`                                  // Number of corrupt pieces
	SupportCrypto int32  `protobuf:"varint,14,opt,name=support_crypto,json=supportCrypto,proto3" json:"support_crypto,omitempty"` // Flag indicating support for encryption (0 or 1)
	Redundant     int32  `protobuf:"varint,15,opt,name=redundant,proto3" json:"redundant,omitempty"`                              // Number of redundant pieces
}

func (x *GetTrackerRequest) Reset() {
	*x = GetTrackerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracker_v1_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrackerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrackerRequest) ProtoMessage() {}

func (x *GetTrackerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tracker_v1_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrackerRequest.ProtoReflect.Descriptor instead.
func (*GetTrackerRequest) Descriptor() ([]byte, []int) {
	return file_tracker_v1_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *GetTrackerRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetTrackerRequest) GetInfoHash() []byte {
	if x != nil {
		return x.InfoHash
	}
	return nil
}

func (x *GetTrackerRequest) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *GetTrackerRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetTrackerRequest) GetUploaded() int64 {
	if x != nil {
		return x.Uploaded
	}
	return 0
}

func (x *GetTrackerRequest) GetDownloaded() int64 {
	if x != nil {
		return x.Downloaded
	}
	return 0
}

func (x *GetTrackerRequest) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *GetTrackerRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *GetTrackerRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GetTrackerRequest) GetNumWant() int32 {
	if x != nil {
		return x.NumWant
	}
	return 0
}

func (x *GetTrackerRequest) GetCompact() int32 {
	if x != nil {
		return x.Compact
	}
	return 0
}

func (x *GetTrackerRequest) GetNoPeerId() int32 {
	if x != nil {
		return x.NoPeerId
	}
	return 0
}

func (x *GetTrackerRequest) GetCorrupt() int32 {
	if x != nil {
		return x.Corrupt
	}
	return 0
}

func (x *GetTrackerRequest) GetSupportCrypto() int32 {
	if x != nil {
		return x.SupportCrypto
	}
	return 0
}

func (x *GetTrackerRequest) GetRedundant() int32 {
	if x != nil {
		return x.Redundant
	}
	return 0
}

type GetTrackerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureReason  string      `protobuf:"bytes,1,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`    // Optional: Reason for failure
	WarningMessage string      `protobuf:"bytes,2,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"` // Optional: Warning message
	Interval       int32       `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`                                  // Required: Update interval in seconds
	MinInterval    int32       `protobuf:"varint,4,opt,name=min_interval,json=minInterval,proto3" json:"min_interval,omitempty"`         // Optional: Minimum update interval in seconds
	TrackerId      string      `protobuf:"bytes,5,opt,name=tracker_id,json=trackerId,proto3" json:"tracker_id,omitempty"`                // Optional: Identifier for the trackerV1
	Complete       int32       `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`                                  // Required: Number of complete torrents
	Incomplete     int32       `protobuf:"varint,7,opt,name=incomplete,proto3" json:"incomplete,omitempty"`                              // Required: Number of incomplete torrents
	Peers          []*PeerInfo `protobuf:"bytes,8,rep,name=peers,proto3" json:"peers,omitempty"`                                         // List of peers in non-compact mode
	PeersCompact   []byte      `protobuf:"bytes,9,opt,name=peers_compact,json=peersCompact,proto3" json:"peers_compact,omitempty"`       // List of peers in compact mode
}

func (x *GetTrackerResponse) Reset() {
	*x = GetTrackerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracker_v1_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrackerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrackerResponse) ProtoMessage() {}

func (x *GetTrackerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tracker_v1_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrackerResponse.ProtoReflect.Descriptor instead.
func (*GetTrackerResponse) Descriptor() ([]byte, []int) {
	return file_tracker_v1_tracker_proto_rawDescGZIP(), []int{1}
}

func (x *GetTrackerResponse) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *GetTrackerResponse) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *GetTrackerResponse) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *GetTrackerResponse) GetMinInterval() int32 {
	if x != nil {
		return x.MinInterval
	}
	return 0
}

func (x *GetTrackerResponse) GetTrackerId() string {
	if x != nil {
		return x.TrackerId
	}
	return ""
}

func (x *GetTrackerResponse) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *GetTrackerResponse) GetIncomplete() int32 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

func (x *GetTrackerResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *GetTrackerResponse) GetPeersCompact() []byte {
	if x != nil {
		return x.PeersCompact
	}
	return nil
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"` // Unique identifier for the peer
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                       // IP address of the peer
	Port   int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`                  // Port number of the peer
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tracker_v1_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tracker_v1_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_tracker_v1_tracker_proto_rawDescGZIP(), []int{2}
}

func (x *PeerInfo) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *PeerInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PeerInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_tracker_v1_tracker_proto protoreflect.FileDescriptor

var file_tracker_v1_tracker_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x57, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x22, 0xcf,
	0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x22, 0x47, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x75, 0x0a, 0x0e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d,
	0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47,
	0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x70, 0x34, 0x30, 0x32, 0x2f, 0x48, 0x65,
	0x72, 0x6d, 0x65, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tracker_v1_tracker_proto_rawDescOnce sync.Once
	file_tracker_v1_tracker_proto_rawDescData = file_tracker_v1_tracker_proto_rawDesc
)

func file_tracker_v1_tracker_proto_rawDescGZIP() []byte {
	file_tracker_v1_tracker_proto_rawDescOnce.Do(func() {
		file_tracker_v1_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_tracker_v1_tracker_proto_rawDescData)
	})
	return file_tracker_v1_tracker_proto_rawDescData
}

var file_tracker_v1_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tracker_v1_tracker_proto_goTypes = []any{
	(*GetTrackerRequest)(nil),  // 0: trackerV1.v1.GetTrackerRequest
	(*GetTrackerResponse)(nil), // 1: trackerV1.v1.GetTrackerResponse
	(*PeerInfo)(nil),           // 2: trackerV1.v1.PeerInfo
}
var file_tracker_v1_tracker_proto_depIdxs = []int32{
	2, // 0: trackerV1.v1.GetTrackerResponse.peers:type_name -> trackerV1.v1.PeerInfo
	0, // 1: trackerV1.v1.TrackerService.GetTracker:input_type -> trackerV1.v1.GetTrackerRequest
	1, // 2: trackerV1.v1.TrackerService.GetTracker:output_type -> trackerV1.v1.GetTrackerResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tracker_v1_tracker_proto_init() }
func file_tracker_v1_tracker_proto_init() {
	if File_tracker_v1_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tracker_v1_tracker_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetTrackerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracker_v1_tracker_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetTrackerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tracker_v1_tracker_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracker_v1_tracker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tracker_v1_tracker_proto_goTypes,
		DependencyIndexes: file_tracker_v1_tracker_proto_depIdxs,
		MessageInfos:      file_tracker_v1_tracker_proto_msgTypes,
	}.Build()
	File_tracker_v1_tracker_proto = out.File
	file_tracker_v1_tracker_proto_rawDesc = nil
	file_tracker_v1_tracker_proto_goTypes = nil
	file_tracker_v1_tracker_proto_depIdxs = nil
}
